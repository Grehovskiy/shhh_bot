import logging
import xml.etree.ElementTree as ET
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext
from dotenv import load_dotenv
import os
import random
import datetime
import string
import asyncio
import re  # üíÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –∑–∞–±—É–¥—å –∏–º–ø–æ—Ä—Ç –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
import matplotlib.pyplot as plt
from telegram.ext import ConversationHandler
import csv
from datetime import datetime
import json
import random

ADMIN_ID = 272340476  # ‚Üê —Ç–≤–æ–π Telegram ID
user_18_confirmed = set()  # ‚Üê –¥–æ–±–∞–≤—å —Å—é–¥–∞

def generate_discount_code():
    date_part = datetime.now().strftime("%d%m%y")
    random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    return f"{date_part}-{random_part}"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YML_FILE = "yml 2903.yml"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_STRUCTURE = {
    "–î–ª—è –Ω–µ–≥–æ": ["–º–∞—Å—Ç—É—Ä–±–∞—Ç–æ—Ä—ã", "–Ω–∞—Å–∞–¥–∫–∏", "–∫–æ–ª—å—Ü–∞", "–∫—É–∫–æ–ª–∫–∏", "—Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã –¥–ª—è –Ω–µ–≥–æ"],
    "–î–ª—è –Ω–µ–µ": ["–≤–∏–±—Ä–∞—Ç–æ—Ä—ã", "—Ñ–∞–ª–æ–∏–º–∏—Ç–∞—Ç–æ—Ä—ã", "–¥–ª—è –∫–ª–∏—Ç–æ—Ä–∞", "–≤–∏–±—Ä–æ–ø—É–ª–∏", "–∫—É–∫–ª—ã", "—Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã –¥–ª—è –Ω–µ–µ"],
    "–î–ª—è –ø–∞—Ä": ["—Å—Ç—Ä–∞–ø–æ–Ω—ã", "—Ñ–∏—Å—Ç–∏–Ω–≥", "–¥–ª—è –¥–≤–æ–∏—Ö", "–º–µ–±–µ–ª—å"],
    "–ê–Ω–∞–ª": ["–ø–ª–∞–≥–∏", "—Å –≤–∏–±—Ä–∞—Ü–∏–µ–π"],
    "–ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤—ã": ["–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ", "—Å—É–ø–µ—Ä—Ç–æ–Ω–∫–∏–µ", "—Ä–µ–ª—å–µ—Ñ–Ω—ã–µ", "–∞—Ä–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", "–±–æ–ª—å—à–∏–µ"],
    "–°—Ä–µ–¥—Å—Ç–≤–∞": ["–±–∞–¥—ã", "–ø—Ä–æ–ª–æ–Ω–≥–∞—Ç–æ—Ä—ã", "–ø–æ–ø–ø–µ—Ä—Å—ã", "–≤–æ–∑–±—É–¥–∏—Ç–µ–ª–∏ –¥–ª—è –Ω–µ–≥–æ", "–≤–æ–∑–±—É–¥–∏—Ç–µ–ª–∏ –¥–ª—è –Ω–µ–µ", "—Å—É–∂–∞—é—â–∏–µ", "–¥–ª—è –æ—Ä–∞–ª—å–Ω–æ–≥–æ —Å–µ–∫—Å–∞", "—Å —Ñ–µ—Ä–æ–º–æ–Ω–∞–º–∏", "–≥–∏–≥–∏–µ–Ω–∞"],
    "–°–º–∞–∑–∫–∏": ["–≤–æ–¥–Ω–∞—è", "—Å–∏–ª–∏–∫–æ–Ω–æ–≤–∞—è", "–≥–∏–±—Ä–∏–¥–Ω–∞—è", "–º–∞—Å–ª–∞", "–∞–Ω–∞–ª—å–Ω–∞—è", "–æ—Ä–∞–ª—å–Ω–∞—è", "—à–∞—Ä–∏–∫–∏", "–∂–∏–¥–∫–∏–µ –≤–∏–±—Ä–∞—Ç–æ—Ä—ã"],
    "–ë–µ–ª—å–µ": ["–∫–æ–º–ø–ª–µ–∫—Ç", "–±–¥—Å–º", "—Å–µ—Ç–∫–∞", "–∫–æ–∂–∞ –≤–∏–Ω–∏–ª –ª–∞—Ç–µ–∫—Å", "–∫–æ—Å—Ç—é–º—ã", "—Ç—Ä—É—Å–∏–∫–∏ —á—É–ª–æ—á–∫–∏", "–º—É–∂—Å–∫–æ–µ"],
    "–ü–æ–¥–∞—Ä–∫–∏": []
}
CATEGORY_SLUGS = {
    "–º–∞—Å—Ç—É—Ä–±–∞—Ç–æ—Ä—ã": "masturbatory",
    "–Ω–∞—Å–∞–¥–∫–∏": "nasadki",
    "–∫–æ–ª—å—Ü–∞": "rings",
    "—Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã –¥–ª—è –Ω–µ–≥–æ": "sport",
    "–∫—É–∫–æ–ª–∫–∏": "dolls",
    "–≤–∏–±—Ä–∞—Ç–æ—Ä—ã": "vibrators",
    "—Ñ–∞–ª–æ–∏–º–∏—Ç–∞—Ç–æ—Ä—ã": "dildos",
    "–¥–ª—è –∫–ª–∏—Ç–æ—Ä–∞": "for-clits",
    "—Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã –¥–ª—è –Ω–µ–µ": "gym",
    "–≤–∏–±—Ä–æ–ø—É–ª–∏": "vibro-bullets",
    "–∫—É–∫–ª—ã": "man-dolls",
    "—Å—Ç—Ä–∞–ø–æ–Ω—ã": "strapons",
    "—Ñ–∏—Å—Ç–∏–Ω–≥": "big-sizes",
    "–¥–ª—è –¥–≤–æ–∏—Ö": "for-two",
    "–º–µ–±–µ–ª—å": "furniture",
    "–ø–ª–∞–≥–∏": "anal-plugs",
    "—Å –≤–∏–±—Ä–∞—Ü–∏–µ–π": "anal-vibration",
    "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ": "classic-condoms",
    "—Å—É–ø–µ—Ä—Ç–æ–Ω–∫–∏–µ": "super-thin",
    "—Ä–µ–ª—å–µ—Ñ–Ω—ã–µ": "textured",
    "–∞—Ä–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ": "flavored",
    "–±–æ–ª—å—à–∏–µ": "big-size",
    "–±–∞–¥—ã": "bio",
    "–ø—Ä–æ–ª–æ–Ω–≥–∞—Ç–æ—Ä—ã": "prolongators",
    "–ø–æ–ø–ø–µ—Ä—Å—ã": "poppers",
    "–≤–æ–∑–±—É–¥–∏—Ç–µ–ª–∏ –¥–ª—è –Ω–µ–≥–æ": "stimulants-for-him",
    "–≤–æ–∑–±—É–¥–∏—Ç–µ–ª–∏ –¥–ª—è –Ω–µ–µ": "stimulants-for-her",
    "—Å—É–∂–∞—é—â–∏–µ": "constricting",
    "–¥–ª—è –æ—Ä–∞–ª—å–Ω–æ–≥–æ —Å–µ–∫—Å–∞": "for-oral-sex",
    "—Å —Ñ–µ—Ä–æ–º–æ–Ω–∞–º–∏": "with-pheromones",
    "–≥–∏–≥–∏–µ–Ω–∞": "hygiene",
    "–≤–æ–¥–Ω–∞—è": "water-lubes",
    "—Å–∏–ª–∏–∫–æ–Ω–æ–≤–∞—è": "silicone-lubes",
    "–≥–∏–±—Ä–∏–¥–Ω–∞—è": "hybrid",
    "–º–∞—Å–ª–∞": "massage-oils",
    "–∞–Ω–∞–ª—å–Ω–∞—è": "anal-lubes",
    "–æ—Ä–∞–ª—å–Ω–∞—è": "oral-lubes",
    "—à–∞—Ä–∏–∫–∏": "balls-lubes",
    "–∂–∏–¥–∫–∏–µ –≤–∏–±—Ä–∞—Ç–æ—Ä—ã": "liquid-vibrators",
    "–∫–æ–º–ø–ª–µ–∫—Ç": "set-lingerine",
    "–±–¥—Å–º": "bdsm",
    "—Å–µ—Ç–∫–∞": "net",
    "–∫–æ–∂–∞ –≤–∏–Ω–∏–ª –ª–∞—Ç–µ–∫—Å": "leather-vinyl-latex",
    "–∫–æ—Å—Ç—é–º—ã": "role-playing-costumes",
    "—Ç—Ä—É—Å–∏–∫–∏ —á—É–ª–æ—á–∫–∏": "panties-stockings",
    "–º—É–∂—Å–∫–æ–µ": "underwear-for-him",
    "–ø–æ–¥–∞—Ä–∫–∏": "presents",
    "–±–µ–ª—å–µ": "all-lingerine",
    "–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤—ã": "all-condoms",
    "—Å—Ä–µ–¥—Å—Ç–≤–∞": "all-funds",
    "—Å–º–∞–∑–∫–∏": "all-lubes",
    "–¥–ª—è –Ω–µ–≥–æ": "all-for-mans",
    "–¥–ª—è –Ω–µ–µ": "all-for-womans",
    "–¥–ª—è –ø–∞—Ä": "all-for-couples",
    "–∞–Ω–∞–ª": "all-for-anal"
}

category_map = {}
offers_list = []


def load_yml():
    global category_map, offers_list
    try:
        tree = ET.parse(YML_FILE)
        root = tree.getroot()
        categories = root.findall(".//category")
        offers_list[:] = root.findall(".//offer")
        category_map.clear()
        for cat in categories:
            cat_id = cat.attrib.get("id")
            name = cat.text.strip().lower()
            category_map[cat_id] = [x.strip() for x in name.split(";")]
            # üßÉ –•–∞—Ä–¥–∫–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ø–ø–µ—Ä—Å–æ–≤ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
            if cat_id == "285205905532":
                category_map[cat_id] = ["–ø–æ–ø–ø–µ—Ä—Å—ã", "—Å—Ä–µ–¥—Å—Ç–≤–∞"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YML: {e}")
        category_map.clear()
        offers_list.clear()
def load_stories():
    try:
        with open("stories.txt", "r", encoding="utf-8") as f:
            stories = f.read().split("\n\n")  # –ö–∞–∂–¥–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ –¥–≤–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
        return [story.strip() for story in stories if story.strip()]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ stories.txt: {e}")
        return []

# üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
def search_products_by_query(query):
    results = []
    query_lower = query.lower()
    for offer in offers_list:
        name = offer.findtext("name", "").lower()
        desc = offer.findtext("description", "").lower()
        if query_lower in name or query_lower in desc:
            results.append(offer)
    return results

def get_matching_offers(subcategory):
    matched = []
    subcategory = subcategory.lower()

    # üß† –ú–∞–ø–∏–Ω–≥ –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    if subcategory == "–±–µ–∑ –≤–∏–±—Ä–∞—Ü–∏–∏":
        subcategory = "–ø–ª–∞–≥–∏"
    elif subcategory == "—Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã –¥–ª—è –Ω–µ–≥–æ":
        subcategory = "—Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã –¥–ª—è –Ω–µ–≥–æ"
    elif subcategory == "—Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã –¥–ª—è –Ω–µ–µ":
        subcategory = "—Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã –¥–ª—è –Ω–µ–µ"
    elif subcategory == "–º—É–∂—Å–∫–æ–µ":
        subcategory = "–±–µ–ª—å–µ"

    for offer in offers_list:
        cat_id = offer.findtext("categoryId")
        if not cat_id or cat_id not in category_map:
            continue

        offer_cats = category_map[cat_id]
        if subcategory in offer_cats:
            if offer.findtext("url") is not None:
                matched.append(offer)

    # üåê –ü–æ–ª—É—á–∞–µ–º slug-—Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    slug = CATEGORY_SLUGS.get(subcategory, "")
    return matched, slug



async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–æ–∑—Ä–∞—Å—Ç ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ 18+
    if user_id not in user_18_confirmed:
        keyboard = [
            [
                InlineKeyboardButton("üîû –î–∞, –º–Ω–µ –µ—Å—Ç—å 18", callback_data="age_yes"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –º–Ω–µ –Ω–µ—Ç 18", callback_data="age_no"),
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö (18+). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=markup)
        elif update.callback_query:
            await update.callback_query.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö (18+). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=markup)
        return  # ‚Üê –û–ß–ï–ù–¨ –í–ê–ñ–ù–û! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–µ—Å—å, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–æ–∑—Ä–∞—Å—Ç

    # –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –Ω–æ –ø–æ–ª –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª
    if "gender" not in context.user_data:
        keyboard = [
            [InlineKeyboardButton("üë¶ –ú–∞–ª—å—á–∏–∫", callback_data="gender_boy")],
            [InlineKeyboardButton("üëß –î–µ–≤–æ—á–∫–∞", callback_data="gender_girl")],
            [InlineKeyboardButton("üöÅ –ë–æ–µ–≤–æ–π –≤–µ—Ä—Ç–æ–ª–µ—Ç", callback_data="gender_heli")]
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è üòè",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # –í—Å—ë –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚Äî –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤ –º–µ–Ω—é
    await gender_callback(update, context)


    gender = context.user_data.get("gender", "boy")
    if gender == "girl":
        nickname = "–∫–∏—Å–∫–∞"
    elif gender == "heli":
        nickname = "–≤–µ—Ä—Ç–æ–ª—ë—Ç–∏–∫"
    else:
        nickname = "–∫–æ—Ç–∏–∫"

    reply_kb = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üè† –ú–µ–Ω—é"), KeyboardButton("üé≤ –ú–Ω–µ –ø–æ–≤–µ–∑—ë—Ç!"), KeyboardButton("üß† –§–µ—Ç–∏—à –¥–Ω—è")],
            [KeyboardButton("üìñ –ö–≤–µ—Å—Ç"), KeyboardButton("üìö –ò—Å—Ç–æ—Ä–∏–∏ –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"), KeyboardButton("üîç –ü–æ–∏—Å–∫")],
            [KeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º"), KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å"), KeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç")],
            [KeyboardButton("üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ üòò", reply_markup=reply_kb)



    if update.message:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {nickname} üòò –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ... –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:",
            reply_markup=reply_kb
        )
        keyboard = [[InlineKeyboardButton(cat, callback_data=f"main_{cat}")] for cat in CATEGORY_STRUCTURE]
        markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üçë –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üçë", reply_markup=markup)

    elif update.callback_query:
        await update.callback_query.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {nickname} üòò –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ... –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:",
            reply_markup=reply_kb
        )
        keyboard = [[InlineKeyboardButton(cat, callback_data=f"main_{cat}")] for cat in CATEGORY_STRUCTURE]
        markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.reply_text("üçë –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üçë", reply_markup=markup)




async def gender_callback(update: Update, context: CallbackContext):
    nickname = get_user_nickname(context)

    # üîò –°–æ—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    reply_kb = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üè† –ú–µ–Ω—é"), KeyboardButton("üé≤ –ú–Ω–µ –ø–æ–≤–µ–∑—ë—Ç!"), KeyboardButton("üß† –§–µ—Ç–∏—à –¥–Ω—è")],
            [KeyboardButton("üìñ –ö–≤–µ—Å—Ç"), KeyboardButton("üìö –ò—Å—Ç–æ—Ä–∏–∏ –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"), KeyboardButton("üîç –ü–æ–∏—Å–∫")],
            [KeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º"), KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å"), KeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç")],
            [KeyboardButton("üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")]
        ],
        resize_keyboard=True
    )

    if update.message:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ üòò",
            reply_markup=reply_kb
        )
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ üòò",
            reply_markup=reply_kb
        )

    await update.message.reply_text("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ üòò", reply_markup=reply_kb)


    await query.message.reply_text(
        f"–í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å, {nickname} üçë",
        reply_markup=reply_kb
    )

    keyboard = [[InlineKeyboardButton(cat, callback_data=f"main_{cat}")] for cat in CATEGORY_STRUCTURE]
    markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup)



def get_user_nickname(context: CallbackContext) -> str:
    gender = context.user_data.get("gender", "boy")
    if gender == "girl":
        return "–∫–∏—Å–∫–∞"
    elif gender == "heli":
        return "–≤–µ—Ä—Ç–æ–ª—ë—Ç–∏–∫"
    return "–∫–æ—Ç–∏–∫"

async def show_subcategories(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    main_cat = query.data.split("_", 1)[1]
    log_action(update.effective_user, f"–æ—Ç–∫—Ä—ã–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {main_cat}")
    subcats = CATEGORY_STRUCTURE.get(main_cat, [])

    # üéÅ –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ü–æ–¥–∞—Ä–∫–∏", —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    if main_cat.lower() == "–ø–æ–¥–∞—Ä–∫–∏":
        context.user_data["main_cat"] = main_cat
        context.user_data["sub_cat"] = main_cat
        matched_offers, _ = get_matching_offers(main_cat)
        context.user_data["offers"] = matched_offers
        
        if isinstance(matched_offers, tuple):
            matched_offers = matched_offers[0]

        if not matched_offers:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_home")],
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://shhh.kz")]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                "ü´£ –ü–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤—è—Ç—Å—è!",
                reply_markup=markup
            )
            return

        for offer in matched_offers[:5]:
            await send_offer(context, query.message.chat_id, offer)

        followup_keyboard = [
            [InlineKeyboardButton("üõí –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏", callback_data="load_all")],
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://shhh.kz")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_home")]
        ]
        await query.message.reply_text("–í–æ—Ç —Ç–≤–æ–∏ –ø–æ–¥–∞—Ä–æ—á–∫–∏ üéÅüòâ", reply_markup=InlineKeyboardMarkup(followup_keyboard))
        return

    if not subcats:
        context.user_data["main_cat"] = main_cat
        context.user_data["sub_cat"] = main_cat
        await show_products(update, context)
        return

    keyboard = [[InlineKeyboardButton(sub.title(), callback_data=f"sub_{main_cat}_{sub}")] for sub in subcats]
    keyboard.append([InlineKeyboardButton("üîù –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")])
    markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(f"–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è *{main_cat}*", reply_markup=markup, parse_mode="Markdown")



async def show_products(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    _, main_cat, sub_cat = query.data.split("_", 2)
    log_action(update.effective_user, f"–æ—Ç–∫—Ä—ã–ª –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {sub_cat}")


    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ü–æ–¥–∞—Ä–∫–∏" (–Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π)
    if main_cat == "–ü–æ–¥–∞—Ä–∫–∏":
        matched_offers = get_matching_offers(main_cat)
    else:
        matched_offers, _ = get_matching_offers(sub_cat)

    context.user_data["offers"] = matched_offers

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
    if not matched_offers:
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"main_{main_cat}")],
            [InlineKeyboardButton("üîù –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")],
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://shhh.kz")]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            f"ü´£ –¢–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{sub_cat.title()}* –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            "–ù–æ –º—ã –º–æ–∂–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –∫–æ–µ-—á—Ç–æ –¥—Ä—É–≥–æ–µ üòâ",
            parse_mode="Markdown",
            reply_markup=markup
        )
        return

    # –ù–∞—á–∞–ª—å–Ω—ã–π offset = 0 (—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏)
    context.user_data["offers_offset"] = 0

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ <= 5 ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ä–∞–∑—É –∏ –Ω–µ –¥–∞—ë–º –∫–Ω–æ–ø–∫—É
    if len(matched_offers) <= 5:
        for offer in matched_offers:
            await send_offer(context, query.message.chat_id, offer)

        final_keyboard = [
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://shhh.kz")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"main_{main_cat}")],
            [InlineKeyboardButton("üîù –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")]
        ]
        await query.message.reply_text(
            "–í–æ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üí¶",
            reply_markup=InlineKeyboardMarkup(final_keyboard)
        )
        return
    else:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ > 5
        for offer in matched_offers[:5]:
            await send_offer(context, query.message.chat_id, offer)

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –º—ã –ø–æ–∫–∞–∑–∞–ª–∏ 5 —Ç–æ–≤–∞—Ä–æ–≤
        context.user_data["offers_offset"] = 5

        # –í–æ—Ç —Å–∞–º–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë 5"
        followup_keyboard = [
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë 5", callback_data="load_more")],
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://shhh.kz")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_home")],
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await query.message.reply_text(
            "–≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ... –•–æ—á–µ—à—å –µ—â—ë? üòè",
            reply_markup=InlineKeyboardMarkup(followup_keyboard)
        )


async def load_more(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    # –ë–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ user_data –≤ show_products
    matched_offers = context.user_data.get("offers", [])
    # –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π offset, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç, —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –º—ã —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏
    offset = context.user_data.get("offers_offset", 0)

    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –º—ã —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ –≤—Å–µ, –≤—ã–≤–µ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not matched_offers or offset >= len(matched_offers):
        await query.message.reply_text("–¢—É—Ç —É–∂–µ –ø—É—Å—Ç–æ üôà")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
    new_offset = offset + 5
    for offer in matched_offers[offset:new_offset]:
        await send_offer(context, query.message.chat_id, offer)

    # –û–±–Ω–æ–≤–ª—è–µ–º offset, —Ç–µ–ø–µ—Ä—å –º—ã –ø–æ–∫–∞–∑–∞–ª–∏ –µ—â—ë 5
    context.user_data["offers_offset"] = new_offset

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è offset –º—ã –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞
    if new_offset >= len(matched_offers):
        final_keyboard = [
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://shhh.kz")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_home")],
        ]
        await query.message.reply_text(
            "–í–æ—Ç –∏ –≤—Å—ë –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üí¶",
            reply_markup=InlineKeyboardMarkup(final_keyboard)
        )
    else:
        # –ó–ê–ö–û–ù–ß–ò–õ–ò –†–ê–ó–¨–ï–ë –ö–ù–û–ü–ö–ò –ù–ê–ó–ê–î –ò –í –ù–ê–ß–ê–õ–û!!!
        # –ï—â—ë –Ω–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–∫–∞–∑–∞–Ω—ã, —Å–Ω–æ–≤–∞ –¥–∞—ë–º –∫–Ω–æ–ø–∫—É ¬´–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë 5¬ª
        followup_keyboard = [
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë 5", callback_data="load_more")],
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://shhh.kz")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_home")],
        ]
        await query.message.reply_text(
            "–ü—Ä–æ–¥–æ–ª–∂–∏–º? üòè",
            reply_markup=InlineKeyboardMarkup(followup_keyboard)
        )




async def show_all_products(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    # –¢–µ–ø–µ—Ä—å –±–µ—Ä—ë–º —Ç–æ–≤–∞—Ä—ã –Ω–∞—á–∏–Ω–∞—è —Å 6-–≥–æ
    offers = context.user_data.get("offers", [])[5:]
    main_cat = context.user_data.get("main_cat", "")
    sub_cat = context.user_data.get("sub_cat", main_cat)

    if not offers:
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"main_{main_cat}")],
            [InlineKeyboardButton("üîù –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")],
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://shhh.kz")]
        ]
        await query.message.reply_text(
            "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ ü´£\n\n–ù–æ –º—ã –º–æ–∂–µ–º –ø–æ–∏—Å–∫–∞—Ç—å —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ üòè",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    for offer in offers:
        await send_offer(context, query.message.chat_id, offer)

    final_keyboard = [
        [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://shhh.kz")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"main_{main_cat}")],
        [InlineKeyboardButton("üîù –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")]
    ]
    await query.message.reply_text("–í–æ—Ç –∏ –≤—Å—ë, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üí¶", reply_markup=InlineKeyboardMarkup(final_keyboard))


async def send_offer(context: CallbackContext, chat_id, offer):
    # –ó–∞–±–∏—Ä–∞–µ–º ID –æ—Ñ—Ñ–µ—Ä–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ <offer id="...">
    offer_id = offer.attrib.get("id", "unknown")

    name = offer.findtext("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    price = offer.findtext("price", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    img = offer.findtext("picture")
    url = offer.findtext("url", "https://shhh.kz")

    # –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–∞—ë–º –∫–æ—Ä–æ—Ç–µ–Ω—å–∫–∏–π —Ç–µ–∫—Å—Ç:
    caption = (
        f"üî• <b>{name}</b>\n"
        f"üí∏ –¶–µ–Ω–∞: {price} KZT\n\n"
        "–ù–∞–∂–º–∏ ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."
    )

    # –î–≤–µ –∫–Ω–æ–ø–∫–∏: ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª (—Å callback_data) –∏ ¬´–í –º–∞–≥–∞–∑–∏–Ω¬ª
    markup = InlineKeyboardMarkup([[
        InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{offer_id}"),
        InlineKeyboardButton("–í –º–∞–≥–∞–∑–∏–Ω", url=url)
    ]])

    if img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption=caption,
            parse_mode="HTML",
            reply_markup=markup
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=caption,
            parse_mode="HTML",
            reply_markup=markup
        )

async def show_details(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º offer_id –∏–∑ callback_data, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ "details_XXX"
    data = query.data
    offer_id = data.split("_", 1)[1]

    # –ò—â–µ–º –Ω—É–∂–Ω—ã–π <offer> –≤ offers_list (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –≤ load_yml)
    global offers_list
    offer = None
    for off in offers_list:
        if off.attrib.get("id") == offer_id:
            offer = off
            break

    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞—à–ª–∏
    if offer is None:
        await query.message.reply_text("–£–ø—Å, –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üôà")
        return


    # –ë–µ—Ä—ë–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–æ–ª—è <description>
    desc = offer.findtext("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    desc = desc.replace("<br>", "\n").replace("<br >", "\n").replace("<br />", "\n")
    name = offer.findtext("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    price = offer.findtext("price", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    url = offer.findtext("url", "https://shhh.kz")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π caption, —É–∂–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    new_caption = (
        f"üî• <b>{name}</b>\n"
        f"üí∏ –¶–µ–Ω–∞: {price} KZT\n\n"
        f"{desc}"
    )

    # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–í –º–∞–≥–∞–∑–∏–Ω" (–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
    markup = InlineKeyboardMarkup([[
        InlineKeyboardButton("–í –º–∞–≥–∞–∑–∏–Ω", url=url)
    ]])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç—É –∂–µ —Ñ–æ—Ç–∫—É (—Ç–æ—Ç –∂–µ message), –¥–æ–±–∞–≤–ª—è—è –æ–ø–∏—Å–∞–Ω–∏–µ
    try:
        await query.message.edit_caption(
            caption=new_caption,
            parse_mode="HTML",
            reply_markup=markup
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë),
        # –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

async def handle_start_button(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    log_action(update.effective_user, "–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É üü¢ –°—Ç–∞—Ä—Ç")

    if user_id not in user_18_confirmed:
        keyboard = [
            [
                InlineKeyboardButton("üîû –î–∞, –º–Ω–µ –µ—Å—Ç—å 18", callback_data="age_yes"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –º–Ω–µ –Ω–µ—Ç 18", callback_data="age_no"),
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö (18+). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=markup)
        return

    # –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω 18+ ‚Äî —Å—Ä–∞–∑—É –∫ –ø–æ–ª—É
    await ask_gender(update, context)
    
async def ask_gender(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üë¶ –ú–∞–ª—å—á–∏–∫", callback_data="gender_boy")],
        [InlineKeyboardButton("üëß –î–µ–≤–æ—á–∫–∞", callback_data="gender_girl")],
        [InlineKeyboardButton("üöÅ –ë–æ–µ–≤–æ–π –≤–µ—Ä—Ç–æ–ª–µ—Ç", callback_data="gender_heli")]
    ]

    if update.message:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è üòè",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            "–í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è üòè",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        
async def story_command(update: Update, context: CallbackContext) -> None:
    stories = load_stories()
    log_action(update.effective_user, "–æ—Ç–∫—Ä—ã–ª üìö –ò—Å—Ç–æ—Ä–∏–∏ –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    if not stories:
        await update.message.reply_text("–û–π, –ø–æ—Ö–æ–∂–µ, –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ —Å–±–µ–∂–∞–ª–∏! üôà")
        return

    used = context.user_data.get("used_stories", set())

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—â—ë –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏—Å—å
    unused_stories = [s for i, s in enumerate(stories) if i not in used]

    if not unused_stories:
        context.user_data["used_stories"] = set()
        nickname = get_user_nickname(context)
        await update.message.reply_text(f"{nickname}, —Ç—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –≤—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ üòò –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...")
        unused_stories = stories.copy()

    # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω—É –∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
    chosen_story = random.choice(unused_stories)
    index = stories.index(chosen_story)
    context.user_data.setdefault("used_stories", set()).add(index)

    await update.message.reply_text(f"{chosen_story}")

async def show_search_results(update: Update, context: CallbackContext):
    results = context.user_data.get("search_results", [])
    offset = context.user_data.get("search_offset", 0)
    chunk = results[offset:offset+3]

    if not chunk:
        await update.message.reply_text("üëÄ –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞‚Ä¶ –ù–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∏—Å–∫–∞—Ç—å –µ—â—ë üòâ")
        return

    for offer in chunk:
        await send_offer(context, update.effective_chat.id, offer)

    context.user_data["search_offset"] = offset + 3

    if context.user_data["search_offset"] < len(results):
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="search_more")]
        ])
        await update.message.reply_text("üí¶ –•–æ—á–µ—à—å –µ—â—ë? –Ø –ø–æ–∫–∞–∂—É‚Ä¶", reply_markup=markup)

async def fallback_to_support(update: Update, context: CallbackContext):
    txt = update.message.text.lower()

    if any(keyword in txt for keyword in ["–º–µ–Ω—é", "–Ω–∞–ø–∏—Å–∞—Ç—å", "—Å–∞–π—Ç"]):
        return  # –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ

    await update.message.reply_text(
        "üîî –ö–∞–∂–µ—Ç—Å—è, —Ç—ã —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –æ–±—Å—É–¥–∏—Ç—å... \n"
        "–í—ã–±–µ—Ä–∏, —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è üòò",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üë† –•–æ–∑—è–π–∫–∞ –ü–æ–ª–∏–Ω–∞", url="https://t.me/+77772992962")],
            [InlineKeyboardButton("üñ§ –ì–æ—Å–ø–æ–∂–∞ –í–∏–∫—Ç–æ—Ä–∏—è", url="https://t.me/+77472992962")],
            [InlineKeyboardButton("üß† –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä", url="https://t.me/+77011001650")]
        ])
    )

# üí¨ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞: –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∏—Å–∫, —Ä–∞–Ω–¥–æ–º –∏ –ø—Ä–æ—á–µ–µ
async def text_handler(update: Update, context: CallbackContext) -> None:
    txt = update.message.text.lower()

    # üí¨ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
import re  # üí¶ –î–æ–±–∞–≤—å –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω!

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ "–ø–æ–∏—Å–∫"
async def text_handler(update: Update, context: CallbackContext) -> None:
    txt = update.message.text.lower()

    # üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ "–ø–æ–∏—Å–∫"
    if context.user_data.get("awaiting_search"):
        context.user_data["awaiting_search"] = False
        search_query = txt.strip().lower()
        pattern = r'\b' + re.escape(search_query)

        matched_offers = []
        for offer in offers_list:
            name = offer.findtext("name", "").lower()
            desc = offer.findtext("description", "").lower()

            if re.search(pattern, name) or re.search(pattern, desc):
                matched_offers.append(offer)

        if not matched_offers:
            await update.message.reply_text("üòî –£–≤—ã, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É...")
            return

        context.user_data["search_results"] = matched_offers
        context.user_data["search_offset"] = 0
        await show_search_results(update, context)
        return

    # üëâ –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ text_handler –Ω–∏–∂–µ...

    # üí¨ –ö–æ–º–∞–Ω–¥–∞ "–ø–æ–∏—Å–∫"
    if "–ø–æ–∏—Å–∫" in txt:
        await update.message.reply_text("üîé –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∏ —è –Ω–∞–π–¥—É —Ç–µ–±–µ —Å–∞–º—ã–µ —Å–æ—á–Ω—ã–µ –∏–≥—Ä—É—à–∫–∏ üòò")
        context.user_data["awaiting_search"] = True
        return

    # üí¨ –ò—Å—Ç–æ—Ä–∏—è-–∫–≤–µ—Å—Ç
    elif "–∫–≤–µ—Å—Ç" in txt or "–∏—Å—Ç–æ—Ä–∏—è" in txt:
        await run_quest_start(update, context)

    # üí¨ –ò—Å—Ç–æ—Ä–∏–∏ –æ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    elif "–∏—Å—Ç–æ—Ä–∏–∏" in txt:
        await story_command(update, context)

    # üí¨ –ú–Ω–µ –ø–æ–≤–µ–∑—ë—Ç
    elif "–º–Ω–µ –ø–æ–≤–µ–∑—ë—Ç" in txt:
        await handle_lucky(update, context)

    # üí¨ –ú–µ–Ω—é
    elif "–º–µ–Ω—é" in txt:
        log_action(update.effective_user, "–Ω–∞–∂–∞–ª üè† –ú–µ–Ω—é")
        keyboard = [[InlineKeyboardButton(cat, callback_data=f"main_{cat}")] for cat in CATEGORY_STRUCTURE]
        markup = InlineKeyboardMarkup(keyboard)
        nickname = get_user_nickname(context)
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {nickname}! –í–æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòò",
            reply_markup=markup
        )

    # üí¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã
    elif "–∫–æ–Ω—Ç–∞–∫—Ç" in txt:
        log_action(update.effective_user, "–Ω–∞–∂–∞–ª üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
        await update.message.reply_text(
            "<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω / WhatsApp / Telegram:</b>\n"
            "+77772992962\n"
            "+77472992962\n\n"
            "<b>üì∏ Instagram:</b> <a href='https://www.instagram.com/shhhshopkz/'>@shhhshopkz</a>\n"
            "<b>üéµ TikTok:</b> <a href='https://www.tiktok.com/@shhh.kz'>@shhh.kz</a>\n"
            "<b>üåê –°–∞–π—Ç:</b> <a href='https://shhh.kz/'>shhh.kz</a>\n\n"
            "<b>üìç –ê–¥—Ä–µ—Å:</b> –ñ–∞–º–±—ã–ª–∞ 180–µ, –ê–ª–º–∞—Ç—ã\n"
            "üïô 10:00‚Äì22:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
            parse_mode="HTML"
        )

    # üí¨ –°–∞–π—Ç
    elif "—Å–∞–π—Ç" in txt:
        log_action(update.effective_user, "–Ω–∞–∂–∞–ª üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç")
        await update.message.reply_text(
            "üíª –ù–∞—à —Å–∞–π—Ç:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://shhh.kz")]
            ])
        )
    elif "–Ω–∞–ø–∏—Å–∞—Ç—å" in txt:
        log_action(update.effective_user, "–Ω–∞–∂–∞–ª üì≤ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º")

        # üß† –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://raw.githubusercontent.com/Grehovskiy/media/main/proff.jpg",
            caption=(
                "üß† <b>–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä</b>\n"
                "–ö–∏–±–µ—Ä-—É—á—ë–Ω—ã–π —Å —Ä—É–∫–∞–º–∏ –∏–∑ —Ç–∏—Ç–∞–Ω–∞ –∏ –º–æ–∑–≥–æ–º, –∫–∞–∫ —É –≤–∏–±—Ä–∞—Ç–æ—Ä–∞ 5-–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è ü§ì\n\n"
                "¬´–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–π.\n"
                "–Ø –º–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–±–µ –≤—Å—ë...\n"
                "–ù–æ –≥–æ—Ä–∞–∑–¥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å üòè¬ª"
            ),
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä—É", url="https://t.me/+77011001650")]
            ])
        )
                # üë† –•–æ–∑—è–π–∫–∞
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://raw.githubusercontent.com/Grehovskiy/media/main/saler.jpg",
            caption=(
                "üë† <b>–•–æ–∑—è–π–∫–∞</b>\n"
                "–£–≤–µ—Ä–µ–Ω–Ω–∞—è, —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏ –∑–Ω–∞–µ—Ç –≤—Å—ë –ø—Ä–æ —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è üòè\n\n"
                "¬´–ü—Ä–∏–≤–µ—Ç, –∫–æ—Ç–∏–∫. –•–æ—á–µ—à—å —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —Å–≤–æ–∏... –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã?¬ª üòò"
            ),
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ü—Ä–æ–¥–∞–≤—â–∏—Ü–µ", url="https://t.me/+77772992962")]
            ])
        )

        # üíã –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://raw.githubusercontent.com/Grehovskiy/media/main/asist.jpg",
            caption=(
                "üíã <b>–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞</b>\n"
                "–ù–µ–∂–Ω–∞—è, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è. –í—Å—ë –ø–æ–¥–±–µ—Ä—ë—Ç —Å–æ –≤–∫—É—Å–æ–º üí´\n\n"
                "¬´–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—ã—à–∫–æ. –Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ —Ç–æ, –æ —á—ë–º —Ç—ã –¥–∞–∂–µ –Ω–µ —Ä–µ—à–∞–ª—Å—è –º–µ—á—Ç–∞—Ç—å...¬ª üå∏"
            ),
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–µ", url="https://t.me/+77472992962")]
            ])
        )




        # üß† –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä
        await context.bot.forward_message(
            chat_id=update.effective_chat.id,
            from_chat_id='-1002463724882',
            message_id=109
        )
        await update.message.reply_text(
            "üß† –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä\n"
            "–ö–∏–±–µ—Ä-—É—á—ë–Ω—ã–π —Å —Ä—É–∫–∞–º–∏ –∏–∑ —Ç–∏—Ç–∞–Ω–∞ –∏ –º–æ–∑–≥–æ–º –∫–∞–∫ —É –≤–∏–±—Ä–∞—Ç–æ—Ä–∞ 5-–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è ü§ì",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä—É", url="https://t.me/+77011001650")]
            ])
        )




    # üí¨ –û –Ω–∞—Å
    elif "–æ –Ω–∞—Å" in txt:
        await update.message.reply_text("–ú—ã ‚Äì –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–∞–≥–∞–∑–∏–Ω. –ú—ã —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –≤–∞—à–∏—Ö —Å–∞–º—ã—Ö —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π üòò")

    # üí¨ –ü–æ–¥–∞—Ä–∫–∏, —Ç–æ–≤–∞—Ä—ã, –∫—É–ø–∏—Ç—å
    elif "–ø–æ–¥–∞—Ä–∫–∏" in txt or "—Ç–æ–≤–∞—Ä—ã" in txt or "–∫—É–ø–∏—Ç—å" in txt:
        matched_offers = get_matching_offers(txt)
        if matched_offers:
            for offer in matched_offers:
                name = offer.findtext("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                price = offer.findtext("price", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                url = offer.findtext("url", "https://shhh.kz")
                description = offer.findtext("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

                await update.message.reply_text(
                    f"üî• <b>{name}</b>\nüí∏ –¶–µ–Ω–∞: {price} KZT\n\n{description}\n\nüîó <a href='{url}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É</a>",
                    parse_mode="HTML"
                )
        else:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")

    # üí¨ –û—Å—Ç–∞–ª—å–Ω–æ–µ
    else:
        nickname = get_user_nickname(context)
        await update.message.reply_text(
            f"üîî –ö–∞–∂–µ—Ç—Å—è, {nickname}, —Ç—ã —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –æ–±—Å—É–¥–∏—Ç—å.\n"
            f"–í—ã–±–µ—Ä–∏, —Å –∫–µ–º –ø–æ—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å üòò",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üë† –•–æ–∑—è–π–∫–∞", url="https://t.me/+77772992962")],
                [InlineKeyboardButton("üñ§ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞", url="https://t.me/+77472992962")],
                [InlineKeyboardButton("üß† –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä", url="https://t.me/+77011001650")]
            ])
        )


async def age_verification_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "age_yes":
        user_18_confirmed.add(user_id)
        log_action(update.effective_user, "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–æ–∑—Ä–∞—Å—Ç 18+")
        await ask_gender(query, context)
    else:
        await query.edit_message_text("–û–π... —Ç–æ–≥–¥–∞ —Ç–µ–±–µ —Å—é–¥–∞ –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è üôà –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ —Å–æ–∑—Ä–µ–µ—à—å üçë")

def log_action(user, action):
    with open("analytics.csv", "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            user.id,
            user.username or "–±–µ–∑ username",
            action
        ])

async def fetish_of_the_day(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    nickname = get_user_nickname(context)

    try:
        with open("fetishes.json", "r", encoding="utf-8") as f:
            fetishes = json.load(f)
    except Exception as e:
        await update.message.reply_text("–û–π... –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–≤–æ–∏ –∏–∑–≤—Ä–∞—â–µ–Ω–∏—è üò¢")
        return

    fetishes_with_products = [f for f in fetishes if f.get("products") and len(f["products"]) > 0]

    if not fetishes_with_products:
        await update.message.reply_text("–û–π... –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–µ—Ç–∏—à–∞ —Å —Ç–æ–≤–∞—Ä–æ–º üò¢")
        return

    now = datetime.now()
    last_time = context.bot_data.get("fetish_last_time")
    if not last_time or last_time.date() != now.date():
        chosen = random.choice(fetishes_with_products)
        context.bot_data["fetish_of_the_day"] = chosen
        context.bot_data["fetish_last_time"] = now
    else:
        chosen = context.bot_data.get("fetish_of_the_day")
        if not chosen or not chosen.get("products"):
            chosen = random.choice(fetishes_with_products)
            context.bot_data["fetish_of_the_day"] = chosen
            context.bot_data["fetish_last_time"] = now

    title = chosen["title"]
    desc = chosen["description"]
    product = chosen["products"][0]

    name = product["name"]
    img = product.get("img", "")
    full_url = product.get("url", "https://shhh.kz")
    
    # üí• –û–±—Ä–µ–∑–∞–µ–º –¥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –≤—Å—ë –¥–æ /tproduct/
    if "/tproduct/" in full_url:
        category_url = full_url.split("/tproduct/")[0] + "/"
    else:
        category_url = full_url  # fallback

    caption = f"üß† <b>{title}</b>\n\n{desc}\n\nüî• <b>{name}</b>"

    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", url=category_url)]
    ])

    if img:
        await update.message.reply_photo(
            photo=img,
            caption=caption,
            parse_mode="HTML",
            reply_markup=markup
        )
    else:
        await update.message.reply_text(caption, parse_mode="HTML", reply_markup=markup)

    await update.message.reply_text("‚ù§Ô∏è‚Äçüî• –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —Ñ–µ—Ç–∏—à... üòà")



# üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ú–Ω–µ –ø–æ–≤–µ–∑—ë—Ç"
async def handle_lucky(update: Update, context: CallbackContext):
    now = datetime.now()
    log_action(update.effective_user, "–Ω–∞–∂–∞–ª üé≤ –ú–Ω–µ –ø–æ–≤–µ–∑—ë—Ç")
    last_used_time = context.user_data.get("last_used_time")

    if last_used_time:
        elapsed = (now - last_used_time).total_seconds()
        if elapsed < 1800:
            remaining = 1800 - elapsed
            minutes = int(remaining // 60)
            seconds = int(remaining % 60)

            nickname = get_user_nickname(context)
            await update.message.reply_text(
                f"‚è≥ –ü–æ–¥–æ–∂–¥–∏, {nickname}, –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–∫–∏–¥–∫–∞ –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç!\n"
                f"‚è± –û—Å—Ç–∞–ª–æ—Å—å {minutes} –º–∏–Ω {seconds} —Å–µ–∫ üòò"
            )
            return

    if not offers_list:
        await update.message.reply_text("–û–π, –∫–∞–∂–µ—Ç—Å—è, –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ! üôà")
        return

    random_offer = random.choice(offers_list)
    discount_code = generate_discount_code()
    context.user_data["last_used_time"] = now
    context.user_data["active_discount"] = discount_code

    name = random_offer.findtext("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    price = random_offer.findtext("price", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    desc = random_offer.findtext("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    img = random_offer.findtext("picture")
    url = random_offer.findtext("url", "https://shhh.kz")

    caption = (
        f"üî• <b>{name}</b>\n"
        f"üí∏ –¶–µ–Ω–∞: {price} KZT\n\n"
        f"{desc}\n\n"
        f"üéüÔ∏è <b>–°–ö–ò–î–ö–ê 15%</b> (—Ç–æ–ª—å–∫–æ 30 –º–∏–Ω)\n"
        f"üîë <code>{discount_code}</code> <i>(–Ω–∞–∂–º–∏ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)</i>"
    )

    markup = InlineKeyboardMarkup([[InlineKeyboardButton("üî• –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –°–ö–ò–î–ö–£", url=url)]])

    if img:
        await context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=img,
            caption=caption,
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text=caption,
            reply_markup=markup,
            parse_mode="HTML"
        )

    # üîî –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    notification = (
        f"üì¢ <b>–í—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–∫–∏–¥–∫–∞!</b>\n\n"
        f"üîë –ö–æ–¥: <code>{discount_code}</code>\n"
        f"üìå –¢–æ–≤–∞—Ä: {name}\n"
        f"üïí {now.strftime('%d-%m-%Y %H:%M')}"
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=notification, parse_mode="HTML")

    # ‚è≥ –¢–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç
    async def discount_timer(context: CallbackContext, chat_id, code):
        await asyncio.sleep(1800)
        context.user_data["active_discount"] = None
        end_time = datetime.now().strftime('%d-%m-%Y %H:%M')
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ùå –°–∫–∏–¥–∫–∞ <code>{code}</code> –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞.\nüïë {end_time}",
            parse_mode="HTML"
        )

    asyncio.create_task(discount_timer(context, update.message.chat_id, discount_code))

async def show_analytics(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è, –º–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å üòò")
        return

    try:
        from collections import Counter
        import datetime

        actions = []
        today_actions = []
        users_all = set()
        users_today = set()

        with open("analytics.csv", "r", encoding="utf-8") as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) >= 4:
                    actions.append(row)
                    user_id = row[1]
                    users_all.add(user_id)
                    try:
                        dt = datetime.datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
                        if dt.date() == datetime.datetime.now().date():
                            today_actions.append(row)
                            users_today.add(user_id)
                    except:
                        pass

        # üìä –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        generate_activity_graph()
        with open("graph.png", "rb") as photo:
            await update.message.reply_photo(photo, caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º")

        # üí¶ –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(actions)
        all_counter = Counter([a[3] for a in actions])
        today_counter = Counter([a[3] for a in today_actions])

        report = (
            "üë• <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"üóì –°–µ–≥–æ–¥–Ω—è: <b>{len(users_today)}</b>\n"
            f"üìÖ –í—Å–µ–≥–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: <b>{len(users_all)}</b>\n\n"
        )

        report += f"<b>üí¶ –í—Å–µ–≥–æ –≤–ø—Ä—ã—Å–∫–æ–≤: {total}</b>\n\n"

        report += "üèÜ <b>–¢–æ–ø –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b>\n"
        for action, num in all_counter.most_common(10):
            report += f"üëâ {action}: {num}\n"

        report += "\nüìÖ <b>–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        for action, num in today_counter.most_common(10):
            report += f"üî∏ {action}: {num}\n"

        await update.message.reply_text(report, parse_mode="HTML")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}")



def generate_activity_graph(file="analytics.csv", output="graph.png"):
    import matplotlib.pyplot as plt
    from collections import Counter
    import datetime

    hours = []

    with open(file, "r", encoding="utf-8") as f:
        reader = csv.reader(f)
        for row in reader:
            if len(row) >= 1:
                try:
                    dt = datetime.datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
                    hours.append(dt.hour)
                except:
                    continue

    counter = Counter(hours)
    hours_sorted = sorted(counter.items())

    x = [f"{hour}:00" for hour, _ in hours_sorted]
    y = [count for _, count in hours_sorted]

    plt.figure(figsize=(10, 5))
    plt.bar(x, y)
    plt.xlabel("–ß–∞—Å—ã")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π")
    plt.title("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º")
    plt.tight_layout()
    plt.savefig(output)
    plt.close()
    
async def run_quest_start(update: Update, context: CallbackContext):
    try:
        with open("quests.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            quests = data.get("quests", [])

        buttons = []
        for quest in quests:
            quest_id = quest["id"]
            title = quest["title"]
            buttons.append([InlineKeyboardButton(title, callback_data=f"start_quest_{quest_id}")])

        markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text(
            "üíã –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —ç—Ä–æ—Ç–∏—á–µ—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é:",
            reply_markup=markup
        )

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–µ—Å—Ç–æ–≤: {e}")

async def handle_quest_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    quest_id = query.data.replace("start_quest_", "")
    context.user_data["selected_quest_id"] = quest_id
    await show_quest_step(update, context, "start")
    
async def run_quest_step(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    step_id = query.data.replace("quest_step_", "")
    await show_quest_step(update, context, step_id)


# üí¨ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏
async def show_quest_step(update: Update, context: CallbackContext, step_id: str):
    try:
        quest_id = context.user_data.get("selected_quest_id", "mansion")
        with open("quests.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            quest = next((q for q in data["quests"] if q["id"] == quest_id), None)
            if not quest:
                await update.effective_chat.send_message("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")
                return
            steps = quest["steps"]

        step = next((s for s in steps if s["id"] == step_id), None)
        if not step:
            await update.effective_chat.send_message("–ö—É–¥–∞-—Ç–æ –Ω–µ —Ç—É–¥–∞ —Å–≤–µ—Ä–Ω—É–ª–∏ üôà")
            return

        if "product_id" in step:
            await update.effective_chat.send_message(step["text"])
            product_id = step["product_id"]
            offer = next((o for o in offers_list if o.attrib.get("id") == product_id), None)

            if offer:
                await send_offer(context, update.effective_chat.id, offer)
                discount_code = generate_discount_code()
                context.user_data["quest_discount"] = discount_code
                now = datetime.now()

                await update.effective_chat.send_message(
                    f"üéüÔ∏è <b>–°–ö–ò–î–ö–ê 10%</b> (—Ç–æ–ª—å–∫–æ 30 –º–∏–Ω)\n"
                    f"üîë <code>{discount_code}</code> <i>(–Ω–∞–∂–º–∏ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)</i>",
                    parse_mode="HTML"
                )

                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"üì¢ –ù–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ –ø–æ –∫–≤–µ—Å—Ç—É!\nüîë <code>{discount_code}</code>\nüïí {now.strftime('%d-%m-%Y %H:%M')}",
                    parse_mode="HTML"
                )
            else:
                await update.effective_chat.send_message(step["text"] + "\n\n(–ê —Ç–æ–≤–∞—Ä–∏–∫ –ø–æ—Ç–µ—Ä—è–ª—Å—è... üò¢)")
            return

        options = step.get("options", [])
        if options:
            keyboard = [
                [InlineKeyboardButton(opt["label"], callback_data=f"quest_step_{opt['next']}")]
                for opt in options
            ]
            markup = InlineKeyboardMarkup(keyboard)
            await update.effective_chat.send_message(step["text"], reply_markup=markup)
        else:
            await update.effective_chat.send_message(step["text"])

    except Exception as e:
        await update.effective_chat.send_message(f"–û—à–∏–±–∫–∞ –≤ –∫–≤–µ—Å—Ç–µ: {e}")


        # üëâ –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π —à–∞–≥ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        options = step.get("options", [])
        if options:
            keyboard = [
                [InlineKeyboardButton(opt["label"], callback_data=f"quest_step_{opt['next']}")]
                for opt in options
            ]
            markup = InlineKeyboardMarkup(keyboard)
            await update.effective_chat.send_message(step["text"], reply_markup=markup)
        else:
            await update.effective_chat.send_message(step["text"])

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_quest_step: {e}")
        await update.effective_chat.send_message("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–µ—Å—Ç–∞ üò¢")



# üí¶ –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ 3 –∑–∞ —Ä–∞–∑
async def show_search_results(update: Update, context: CallbackContext):
    results = context.user_data.get("search_results", [])
    offset = context.user_data.get("search_offset", 0)

    # üí¨ –û–ø—Ä–µ–¥–µ–ª–∏–º, –∫—É–¥–∞ —Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = update.message or update.callback_query.message

    if not results:
        await message.reply_text("üòî –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞‚Ä¶")
        return

    for offer in results[offset:offset+3]:
        await send_offer(context, update.effective_chat.id, offer)

    context.user_data["search_offset"] = offset + 3

    if context.user_data["search_offset"] < len(results):
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="search_more")]
        ])
        await message.reply_text("–•–æ—á–µ—à—å –µ—â—ë? üòè", reply_markup=markup)

# üí¶ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –≤ –ø–æ–∏—Å–∫–µ
async def show_more_search_results(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await show_search_results(update, context)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–æ—á–∫–∏
    keyboard = [[InlineKeyboardButton(choice["text"], callback_data=f"quest_step_{choice['next_id']}")] for choice in step.get("choices", [])]
    markup = InlineKeyboardMarkup(keyboard)

    await update.effective_chat.send_message(step["text"], reply_markup=markup)

async def reload_yml_command(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –¢—ã –Ω–µ –º–æ–π –±–æ—Å—Å üòò")
        return

    try:
        load_yml()
        await update.message.reply_text("‚úÖ YML-—Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ YML: {e}")

    # –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –ï–ë–ê–ù–û–ô –ö–ù–û–ü–ö–ò –í –ù–ê–ß–ê–õ–û!
async def go_to_main_menu(update: Update, context: CallbackContext):
    nickname = get_user_nickname(context)
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"main_{cat}")] for cat in CATEGORY_STRUCTURE]
    markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {nickname} üòò –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ... –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:",
            reply_markup=markup
        )

async def handle_go_home(update: Update, context: CallbackContext):
    nickname = get_user_nickname(context)
    reply_kb = build_reply_keyboard()

    keyboard = [[InlineKeyboardButton(cat, callback_data=f"main_{cat}")] for cat in CATEGORY_STRUCTURE]
    markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {nickname} üòò –í–æ—Ç –Ω–∞—à–µ –≥–æ—Ä—è—á–µ–µ –º–µ–Ω—é:",
            reply_markup=reply_kb
        )
        await update.callback_query.message.reply_text("üçë –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üçë", reply_markup=markup)

def main():
    load_yml()
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # üë† –•—ç–Ω–¥–ª–µ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CommandHandler("story", story_command))
    app.add_handler(CallbackQueryHandler(gender_callback, pattern="^gender_"))
    app.add_handler(CallbackQueryHandler(age_verification_callback, pattern="^age_"))
    app.add_handler(CallbackQueryHandler(start, pattern="^start$"))
    app.add_handler(CallbackQueryHandler(show_subcategories, pattern="^main_.*"))
    app.add_handler(CallbackQueryHandler(go_to_main_menu, pattern="^go_home$"))
    app.add_handler(CallbackQueryHandler(show_products, pattern="^sub_.*_.*"))
    app.add_handler(CallbackQueryHandler(load_more, pattern="^load_more$"))
    app.add_handler(CallbackQueryHandler(show_all_products, pattern="^load_all$"))
    app.add_handler(CallbackQueryHandler(show_details, pattern="^details_.*"))
    app.add_handler(CallbackQueryHandler(show_search_results, pattern="^search_more$"))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üü¢ –°—Ç–∞—Ä—Ç$"), handle_start_button))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üß† –§–µ—Ç–∏—à –¥–Ω—è$"), fetish_of_the_day))
    app.add_handler(CommandHandler("quest", run_quest_start))
    app.add_handler(CallbackQueryHandler(handle_quest_selection, pattern=r"^start_quest_.*"))
    app.add_handler(CallbackQueryHandler(run_quest_step, pattern=r"^quest_step_.*"))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)^üìñ –∫–≤–µ—Å—Ç$"), run_quest_start))
    app.add_handler(CallbackQueryHandler(handle_go_home, pattern="^go_home$"))
    app.add_handler(CommandHandler("reload_yml", reload_yml_command))
    app.add_handler(CommandHandler("stats", show_analytics))

    # üî• –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤ (—Ç–≤–æ–∏ —É—Å–ª–æ–≤–∏—è: "–º–µ–Ω—é", "–Ω–∞–ø–∏—Å–∞—Ç—å", "—Å–∞–π—Ç")
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üéâ")
    app.run_polling()

if __name__ == "__main__":
    main()
